server:
  port: 8103

spring:
  application:
    name: sc-consul-consumer
  cloud:
    consul:
      host: localhost
      port: 8500
    openfeign:
      client:
        config:
          # 设置 openfeign 的全局超时时间
          default:
            connectTimeout: 15000
            readTimeout: 15000
          # 对一个服务设置超时时间
          cloud-payment-service:
            connectTimeout: 10000
            readTimeout: 10000
      httpclient:
        hc5:
          enabled: true
      # 压缩配置
      compression:
        request:
          enabled: true
          # 最小触发压缩的大小
          min-request-size: 2048
          # 触发压缩数据类型
          mime-types: text/xml,application/xml,application/json
        response:
          enabled: true
      # 开启 circuitbreaker 和分组激活
      circuitbreaker:
        enabled: true
        group:
          # 演示 Bulkhead.Type.THREADPOOL 时置为 false
          enabled: true
# 配置开启 feign 日志的客户端, feign日志以什么级别监控哪个接口
logging:
  level:
    com.cozz.common.api.ConsulFeignApi: debug
# 断路器配置
resilience4j:
  # timelimiter 默认限制远程1s，超于1s就超时异常，如果配置了降级就走降级逻辑
  timelimiter:
    configs:
      default:
        timeout-duration: 8s
    instances:
      sc-consul-provider:
        base-config: default
  # 熔断降级配置
  circuitbreaker:
    configs:
      count_type:
        failureRateThreshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
        slidingWindowType: COUNT_BASED # 滑动窗口的类型
        slidingWindowSize: 6 # 滑动窗⼝的⼤⼩配置COUNT_BASED表示6个请求，配置TIME_BASED表示6秒
        minimumNumberOfCalls: 6 # 断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
        waitDurationInOpenState: 5s # 从OPEN到HALF_OPEN状态需要等待的时间
        permittedNumberOfCallsInHalfOpenState: 2 # 半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果其中有任何一个请求失败，CircuitBreaker将重新进入开启状态。
        recordExceptions:
          - java.lang.Exception
      time_type:
        failureRateThreshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
        slidingWindowType: TIME_BASED # 滑动窗口的类型
        slidingWindowSize: 10 # 滑动窗口的大小配置，单位秒
        minimumNumberOfCalls: 4 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
        slowCallDurationThreshold: 2s # 慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
        slowCallRateThreshold: 20 # 慢调用百分比峰值，当慢调用比例高于阈值，断路器打开，并开启服务降级
        waitDurationInOpenState: 5s # 从OPEN到HALF_OPEN状态需要等待的时间
        permittedNumberOfCallsInHalfOpenState: 2 # 半开状态允许的最大请求数，默认值为10。
        recordExceptions:
          - java.lang.Exception
    instances:
      sc-consul-provider:
        base-config: time_type
  # bulkhead 舱壁隔离配置
  bulkhead:
    configs:
      default:
        # 隔离允许并发线程执行的最大数量
        maxConcurrentCalls: 2
        # 当达到并发调用数量时，新的线程的阻塞时间，设置等待1秒，超时进舱壁兜底fallback
        maxWaitDuration: 1s
    instances:
      sc-consul-provider:
        base-config: default
#  thread-pool-bulkhead:
#    # 配置前将 spring.cloud.openfeign.circuitbreaker.group.enabled 请设置为 false 新启线程和原来主线程脱离
#    configs:
#      default:
#        core-thread-pool-size: 1
#        max-thread-pool-size: 1
#        queue-capacity: 1
#    instances:
#      cloud-payment-service:
#        base-config: default
  ratelimiter:
    configs:
      default:
        # 在一次刷新周期内，允许执行的最大请求数
        limitForPeriod: 1
        # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
        limitRefreshPeriod: 1s
        # 线程等待权限的默认等待时间
        timeout-duration: 1
    instances:
      sc-consul-provider:
        base-config: default
# 链路追踪配置
# micrometer + zipkin
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      # 采样率默认为0.1(0.1就是10次只能有一次被记录下来)，值越大收集越及时。
      probability: 1.0