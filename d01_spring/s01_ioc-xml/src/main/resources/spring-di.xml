<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--  setter 注入  -->
    <bean id="studentOne" class="bean.di.Student">
        <!--    property 标签：通过逐渐类的setXxx()方法给组件对象设置属性    -->
        <!--    name 属性：指定属性名（这个属性名是getXxx()/setXxx()方法定义的，和成员变量无关    -->
        <!--    value 属性：指定属性值    -->
        <property name="id" value="1001"/>
        <property name="name" value="mike"/>
        <property name="age" value="23"/>
        <property name="sex" value="男"/>
    </bean>

    <!--  constructor 注入  -->
    <bean id="studentTwo" class="bean.di.Student">
        <!--    constructor-arg 标签还有两个属性可以进一步描述构造器参数    -->
        <!--    index属性：指定参数所在位置的索引（从0开始）   -->
        <!--    name属性：指定参数名    -->
        <constructor-arg value="1002"/>
        <constructor-arg value="lily"/>
        <constructor-arg value="21"/>
        <constructor-arg value="女"/>
    </bean>

    <!--  注入时特殊情况的处理  -->
    <bean id="studentThree" class="bean.di.Student">

        <property name="id" value="1003"/>

        <!--    当value为null时，为name所赋的值是字符串null    -->
        <!--    <property name="name" value="null"/>    -->
        <property name="name">
            <null/>
        </property>

        <property name="age" value="23"/>

        <!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 -->
        <!-- 解决方案一：使用XML实体来代替 -->
        <!-- <property name="sex" value="a &lt; b"/> -->

        <!-- 解决方案二：使用CDATA节 -->
        <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="sex">
            <value><![CDATA[a < b]]></value>
        </property>
    </bean>


    <bean id="clazzOne" class="bean.di.Clazz">
        <property name="clazzId" value="1111"/>
        <property name="clazzName" value="财源滚滚班"/>
    </bean>

    <!--  为对象类型的属性赋值，方式一：引用外部bean  -->
    <bean id="studentFour" class="bean.di.Student">
        <property name="id" value="1004"/>
        <property name="name" value="tom"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <property name="clazz" ref="clazzOne"/>
    </bean>

    <!--  为对象类型的属性赋值，方式二：内部bean  -->
    <bean id="studentFive" class="bean.di.Student">
        <property name="id" value="1005"/>
        <property name="name" value="tom"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <property name="clazz">
            <!-- 在一个bean中再声明一个bean就是内部bean -->
            <!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 -->
            <bean class="bean.di.Clazz">
                <property name="clazzId" value="2222"/>
                <property name="clazzName" value="远大前程班"/>
            </bean>
        </property>
    </bean>

    <!--  为对象类型的属性赋值，方式三：级联属性  -->
    <bean id="studentSix" class="bean.di.Student">
        <property name="id" value="1006"/>
        <property name="name" value="tom"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <property name="clazz" ref="clazzOne"/>
        <property name="clazz.clazzId" value="3333"/>
        <property name="clazz.clazzName" value="最强王者班"/>
    </bean>


    <!--  为数组类型的属性赋值  -->
    <bean id="studentSeven" class="bean.di.Student">
        <property name="id" value="1007"/>
        <property name="name" value="tom"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <property name="clazz" ref="clazzOne"/>
        <property name="hobbies">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
    </bean>


    <!--  为集合类型的属性赋值  -->
    <bean id="clazzTwo" class="bean.di.Clazz">
        <property name="clazzId" value="4444"/>
        <property name="clazzName" value="Java4444"/>
        <property name="students">
            <list>
                <ref bean="studentOne"/>
                <ref bean="studentTwo"/>
                <ref bean="studentThree"/>
            </list>
        </property>
    </bean>


    <bean id="teacherOne" class="bean.di.Teacher">
        <property name="teacherId" value="1001"/>
        <property name="teacherName" value="t1"/>
    </bean>

    <bean id="teacherTwo" class="bean.di.Teacher">
        <property name="teacherId" value="1002"/>
        <property name="teacherName" value="t2"/>
    </bean>

    <!--  为Map类型的属性赋值  -->
    <bean id="studentEight" class="bean.di.Student">
        <property name="id" value="1008"/>
        <property name="name" value="tom"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <property name="clazz" ref="clazzOne"/>
        <property name="hobbies">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
        <property name="teacherMap">
            <map>
                <entry key="1001" value-ref="teacherOne"/>
                <entry key="1002" value-ref="teacherTwo"/>
            </map>
        </property>
    </bean>
</beans>